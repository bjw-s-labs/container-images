---
name: "Build Image"

on:
  workflow_call:
    inputs:
      app:
        type: string
        description: Application Name
        required: true
      version:
        type: string
        description: Version
        required: true
      release:
        type: boolean
        description: Release
        required: true
      test:
        type: boolean
        description: Test
        required: true

jobs:
  build:
    name: Build ${{ inputs.app }} (${{ matrix.platform }})
    runs-on: ${{ matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        platform:
          - amd64
          - arm64
      fail-fast: false
    outputs:
      amd64: ${{ steps.digest.outputs.amd64 }}
      arm64: ${{ steps.digest.outputs.arm64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build Image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        id: build
        with:
          build-args: |
            VENDOR=${{ github.repository_owner }}
            VERSION=${{ inputs.version }}
            REVISION=${{ github.sha }}
          cache-from: |
            ${{ format('type=registry,ref=ghcr.io/{0}/build_cache:{1}-{2},mode=max', github.repository_owner, inputs.app, matrix.platform) }}
          cache-to: |
            ${{ inputs.release && format('type=registry,ref=ghcr.io/{0}/build_cache:{1}-{2}', github.repository_owner, inputs.app, matrix.platform) || '' }}
          labels: |
            org.opencontainers.image.title=${{ inputs.app }}
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}
            org.opencontainers.image.version=${{ inputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          outputs: |
            type=docker
            ${{ inputs.release && format('type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.repository_owner, inputs.app) || '' }}
          context: ./apps/${{ inputs.app }}
          platforms: linux/${{ matrix.platform }}
          provenance: false

      - if: ${{ inputs.test }}
        name: Run Tests
        env:
          GOSS_FILE: ./apps/${{ inputs.app }}/tests.yaml
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
        run: |
          if yq --exit-status '.schemaVersion' ./apps/${{ inputs.app }}/tests.yaml &>/dev/null; then
              curl -fsSL \
                  https://github.com/GoogleContainerTools/container-structure-test/releases/latest/download/container-structure-test-linux-${{ matrix.platform }} \
                  -o /usr/local/bin/container-structure-test
              chmod +x /usr/local/bin/container-structure-test
              container-structure-test test --image ${{ steps.build.outputs.imageid }} --config "${GOSS_FILE}"
          else
              curl -fsSL https://raw.githubusercontent.com/goss-org/goss/5704120d25902119cb1139e04bca3db7742a9f73/install.sh | sh
              dgoss run ${{ steps.build.outputs.imageid }}
          fi

      - if: ${{ inputs.release }}
        name: Export Digest
        id: digest
        run: |
          echo "${{ matrix.platform }}=${{ steps.build.outputs.digest }}" >> "${GITHUB_OUTPUT}"

  release:
    if: ${{ inputs.release }}
    needs: build
    name: Release ${{ inputs.app }}
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup Node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: 22.x

      - name: Install Semver
        run: npm install semver

      - name: Determine Definitive Version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: version
        with:
          script: |
            const semver = require('semver');

            function sanitizeInputVersion(version) {
                return version.split('-')[0]; // Remove any pre-release suffixes
            }

            const version = '${{ inputs.version }}';
            const validSemverRegex = /^v?(\d+(\.\d+)?(\.\d+)?)/;
            const date = new Date();
            const parsedVersion = validSemverRegex.exec(version);
            const validSemver = parsedVersion !== null;

            const parsedSemver = validSemver ? semver.coerce(parsedVersion[0]) : null;
            const outputVersion = validSemver
                ? `${parsedSemver.major}.${parsedSemver.minor}.${parsedSemver.patch}`
                : `${date.getFullYear()}.${date.getMonth() + 1}.${date.getDate()}`;

            const sanitizedInputVersion = validSemver ? sanitizeInputVersion(version) : version;

            core.setOutput('version', outputVersion);
            core.setOutput('validSemver', validSemver);
            core.setOutput('sanitizedInputVersion', sanitizedInputVersion);

      - name: Build Meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          flavor: latest=false
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
            type=raw,value=${{ steps.version.outputs.sanitizedInputVersion }},enable=${{ steps.version.outputs.validSemver }}
            type=raw,value=rolling

      - name: Push Images
        id: push
        uses: Noelware/docker-manifest-action@b33ab348026b120a895167160f5605b0197f0862 # 0.4.3
        with:
          inputs: ${{ join(fromJSON(steps.meta.outputs.json).tags, ',') }}
          images: >-
            ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}@${{ needs.build.outputs.amd64 }},
            ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}@${{ needs.build.outputs.arm64 }}
          push: true

      - name: Export Digest
        id: digest
        run: |
          digest=$(echo "${{ steps.push.outputs.images }}" | grep -oP 'sha256:[^, ]+' | head -n1)
          echo "digest=${digest}" >> "${GITHUB_OUTPUT}"

  attest:
    if: ${{ inputs.release }}
    needs: release
    name: Attest ${{ inputs.app }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Upload Dependency Snapshot
        uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
        with:
          dependency-snapshot: true
          image: ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}@${{ needs.release.outputs.digest }}

      - name: Attestation
        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
        with:
          push-to-registry: true
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}
          subject-digest: ${{ needs.release.outputs.digest }}

      - name: Verify Attestation
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh attestation verify --repo ${{ github.repository }} oci://ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}@${{ needs.release.outputs.digest }}
