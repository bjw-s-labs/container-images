---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Build and Push"

on:
  workflow_dispatch:
    inputs:
      apps:
        description: "Comma separated list of apps to build"
        required: true
        type: string
      release:
        type: boolean
        description: Whether to release the apps
        required: false
        default: false
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  prepare:
    name: Prepare data required for workflow
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.apps.outputs.apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - if: ${{ github.event_name != 'workflow_dispatch' }}
        name: Get Changed Directories
        uses: tj-actions/changed-files@2f7c5bfce28377bc069a65ba478de0a74aa0ca32 # v46.0.1
        id: changed-dirs
        with:
          dir_names: true
          dir_names_max_depth: "1"
          path: apps
          separator: ","

      - name: Setup Node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0

      - name: Install required packages
        run: npm install yaml

      - name: Apps to build
        id: apps
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const yaml = require('yaml');
            const cwd = process.cwd();

            let input = '';
            if (context.eventName == 'workflow_dispatch') {
              input = '${{ inputs.apps }}';
            } else {
              input = '${{ steps.changed-dirs.outputs.all_changed_and_modified_files }}';
            }

            appsToBuild = input.split(',').filter((v) => v !== '');

            let output = [];
            appsToBuild.forEach(function(app) {
              const metadataPath = `${cwd}/apps/${app}/metadata.yaml`;
              if (!fs.existsSync(metadataPath)) {
                core.setFailed(`App ${app} does not have a metadata.yaml`);
                process.exit(1);
              }

              metadataContent = fs.readFileSync(metadataPath, {encoding: "utf8"});
              metadata = yaml.parse(metadataContent);

              output.push(metadata);
            });

            core.setOutput('apps', output);

            console.log('apps:');
            console.log(JSON.stringify(output, null, 2));
            core.summary.addHeading('Apps to build:').addList(appsToBuild).write()

  build:
    name: Build ${{ matrix.app.name }} image
    needs:
      - prepare
    permissions:
      contents: read
      id-token: write
      packages: write
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare.outputs.apps) }}
      fail-fast: true
    uses: ./.github/workflows/workflow_call-build_image.yaml
    with:
      app: ${{ matrix.app.name }}
      version: ${{ matrix.app.version }}
      release: ${{ github.event_name == 'workflow_dispatch' && inputs.release || github.event_name == 'push' }}

  build_success:
    if: ${{ !cancelled() }}
    name: Build matrix success
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') }}
        name: Check matrix status
        run: exit 1
