---
name: "Build Image"

on:
  workflow_call:
    inputs:
      app:
        type: string
        description: The name of the app to build.
        required: true
      image:
        type: string
        description: The name of the image to build.
        required: true
      platforms:
        type: string
        description: The OS arches for which to build the docker image.
        default: linux/amd64
        required: false
      tags:
        type: string
        description: Tags for the image.
        required: true
      labels:
        type: string
        description: Custom labels for the image.
        required: false
      annotations:
        type: string
        description: Custom annotations for the image.
        required: false
      context:
        type: string
        description: The context for the docker build command.
        required: false
        default: "."
      dockerfile:
        type: string
        description: The path to the dockerfile to build.
        required: true
      build-args:
        type: string
        description: Additional build args to pass to the build command.
        default: ""
        required: false
      dry-run:
        type: boolean
        description: Whether or not to push the image.
        default: false
        required: false
      type:
        type: string
        description: The type of application. Valid values are "web" and "cli".
        default: "web"
        required: false
      tests-enabled:
        type: boolean
        description: Whether or not to run goss tests.
        default: false
        required: false

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        if: ${{ !inputs.dry-run }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image }}
          tags: ${{ inputs.tags }}
          labels: ${{ inputs.labels }}
          annotations: ${{ inputs.annotations }}

      - name: Determine primary image name
        id: determine-primary-image
        shell: bash
        run: |
          IFS=$'\n' read -r PRIMARY_IMAGE <<<"${{ inputs.image }}"
          echo "image=$PRIMARY_IMAGE" >> "$GITHUB_OUTPUT"

      - name: Build single arch for testing
        if: ${{ inputs.tests-enabled == true }}
        id: build-test-image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_CHECKS_ANNOTATIONS: false
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64
          push: false
          load: true
          tags: |
            ${{ steps.determine-primary-image.outputs.image }}:testing
          build-args: ${{ inputs.build-args }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/build-cache:${{ inputs.app }},mode=max

      - name: Setup Goss
        if: ${{ inputs.tests-enabled == true }}
        uses: e1himself/goss-installation-action@v1.2.1

      - name: Run Goss Tests
        id: dgoss
        if: ${{ inputs.tests-enabled == true }}
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ inputs.context }}/ci/goss.yaml
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: |
          image_name="${{ steps.determine-primary-image.outputs.image }}:testing"
          declare -a goss_args
          if [[ "${{ inputs.type }}" == "cli" ]]; then
            goss_args+=(
              "tail" "-f" "/dev/null"
            )
          fi
          dgoss run "${image_name}" "${goss_args[@]}"

      - name: Build and (optionally) Push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          push: ${{ !inputs.dry-run }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: ${{ inputs.build-args }}
          cache-to: ${{ !inputs.dry-run && format('type=registry,ref=ghcr.io/{0}/build-cache:{1}', github.repository_owner, inputs.app) || '' }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/build-cache:${{ inputs.app }},mode=max
