---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

set:
  - pipefail
shopt:
  - globstar

vars:
  BIN_DIR: "{{.ROOT_DIR}}/.bin"

tasks:

  default:
    cmd: task --list
    silent: true

  init:
    desc: Initialize the project
    cmds:
      - mkdir -p {{.BIN_DIR}}/{goss,dgoss}
      - gh release download --repo goss-org/goss --skip-existing --pattern "*-linux-{{ARCH}}" --output {{.BIN_DIR}}/goss/goss
      - gh release download --repo goss-org/goss --skip-existing --pattern "dgoss" --output {{.BIN_DIR}}/goss/dgoss
      - chmod +x {{.BIN_DIR}}/goss/goss {{.BIN_DIR}}/goss/dgoss
    preconditions:
      - which gh

  local-build-*:
    desc: Build and Test an app via Docker Buildx
    dir: '{{.WORK_DIR}}'
    cmds:
      - rsync -a --ignore-existing --progress {{.ROOT_DIR}}/include/ {{.WORK_DIR}}
      - rsync -a --ignore-existing --progress {{.ROOT_DIR}}/apps/{{.APP}}/ {{.WORK_DIR}}
      - docker buildx bake --no-cache --metadata-file docker-bake.json --load
      - |
        IMAGE=$(jq --raw-output '."image-local"."image.name"' docker-bake.json)
        case "{{.TEST_TOOL}}" in
            "cst")
                container-structure-test test --image "${IMAGE}" --config tests.yaml
                ;;
            "goss")
                {{.BIN_DIR}}/goss/dgoss run "${IMAGE}"
                ;;
        esac
      - defer: rm -rf {{.WORK_DIR}}
    env:
      GOSS_FILE: tests.yaml
      GOSS_OPTS: --retry-timeout 60s --sleep 1s
      GOSS_PATH: "{{.BIN_DIR}}/goss/goss"
    vars:
      APP: "{{index .MATCH 0}}"
      TEST_TOOL:
        sh: yq --exit-status '.schemaVersion' {{.ROOT_DIR}}/apps/{{.APP}}/tests.yaml &>/dev/null && echo "cst" || echo "goss"
      WORK_DIR:
        sh: mktemp -d
    preconditions:
      - test -f {{.ROOT_DIR}}/apps/{{.APP}}/docker-bake.hcl
      - test -f {{.ROOT_DIR}}/apps/{{.APP}}/tests.yaml
      - test -f {{.ROOT_DIR}}/apps/{{.APP}}/Dockerfile
      - which container-structure-test docker gh jq yq

  remote-build-*:
    desc: Build and Test an app via GitHub Actions
    cmds:
      - gh workflow run release.yaml -f app={{.APP}} -f release={{.RELEASE}}
    vars:
      APP: "{{index .MATCH 0}}"
      RELEASE: |-
        {{.RELEASE | default "false"}}
    preconditions:
      - gh auth status
      - test -f {{.ROOT_DIR}}/.github/workflows/release.yaml
      - which gh
