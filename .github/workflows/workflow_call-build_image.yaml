---
name: "Build Image"

on:
  workflow_call:
    inputs:
      app:
        type: string
        description: The name of the app to build.
        required: true
      image:
        type: string
        description: The name of the image to build.
        required: true
      platforms:
        type: string
        description: The OS arches for which to build the docker image.
        default: linux/amd64
        required: false
      tags:
        type: string
        description: Tags for the image.
        required: true
      labels:
        type: string
        description: Custom labels for the image.
        required: false
      annotations:
        type: string
        description: Custom annotations for the image.
        required: false
      context:
        type: string
        description: The context for the docker build command.
        required: false
        default: "."
      dockerfile:
        type: string
        description: The path to the dockerfile to build.
        required: true
      build-args:
        type: string
        description: Additional build args to pass to the build command.
        default: ""
        required: false
      dry-run:
        type: boolean
        description: Whether or not to push the image.
        default: false
        required: false
      type:
        type: string
        description: The type of application. Valid values are "web" and "cli".
        default: "web"
        required: false
      tests-enabled:
        type: boolean
        description: Whether or not to run goss tests.
        default: false
        required: false

jobs:
  build-test-push:
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.platforms) }}
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        if: ${{ !inputs.dry-run }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image }}
          tags: ${{ inputs.tags }}
          labels: ${{ inputs.labels }}
          annotations: ${{ inputs.annotations }}

      - name: Determine primary image name
        id: determine-primary-image
        shell: bash
        run: |
          IFS=$'\n' read -r PRIMARY_IMAGE <<<"${{ inputs.image }}"
          echo "image=$PRIMARY_IMAGE" >> "$GITHUB_OUTPUT"

      - uses: docker/build-push-action@v6
        name: Build image
        id: build
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: ${{ !inputs.dry-run }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: ${{ inputs.build-args }}
          provenance: false

      - name: Setup Goss
        if: ${{ inputs.tests-enabled == true }}
        uses: e1himself/goss-installation-action@v1.2.1

      - name: Export digest
        # if: ${{ !inputs.dry-run }}
        run: |
          mkdir -p /tmp/digests/${{ inputs.app }}-${{ inputs.image }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ inputs.app }}-${{ inputs.image }}/${digest#sha256:}"

      - name: Upload digest
        # if: ${{ !inputs.dry-run }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.app }}-${{ inputs.image }}
          path: /tmp/digests/${{ inputs.app }}-${{ inputs.image }}/*
          if-no-files-found: error
          retention-days: 1

  # build-image:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write

  #     - name: Run Goss Tests
  #       id: dgoss
  #       if: ${{ inputs.tests-enabled == true }}
  #       shell: bash
  #       env:
  #         CONTAINER_RUNTIME: docker
  #         GOSS_FILE: ${{ inputs.context }}/ci/goss.yaml
  #         GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
  #         GOSS_SLEEP: 2
  #         GOSS_FILES_STRATEGY: cp
  #         CONTAINER_LOG_OUTPUT: goss_container_log_output
  #       run: |
  #         image_name="${{ steps.determine-primary-image.outputs.image }}:testing"
  #         declare -a goss_args
  #         if [[ "${{ inputs.type }}" == "cli" ]]; then
  #           goss_args+=(
  #             "tail" "-f" "/dev/null"
  #           )
  #         fi
  #         dgoss run "${image_name}" "${goss_args[@]}"
