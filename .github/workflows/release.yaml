---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Release"

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:
    inputs:
      app:
        description: Application Name
        required: true
        type: string
      release:
        type: boolean
        description: Release
        required: false
        default: false
      test:
        type: boolean
        description: Test
        required: false
        default: true

jobs:
  pre-job:
    name: Pre-Job
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changed-files.outputs.changed_files }}
    steps:
      - name: Get changed files
        id: changed-files
        uses: bjw-s-labs/action-changed-files@2cc35474e9d534ed0d743aa122fd142afbdaa0ad # v0.3.1
        with:
          path: apps
          include_only_directories: true
          max_depth: 1

  changed:
    if: ${{ needs.pre-job.outputs.changed-files != '[]' || github.event_name == 'workflow_dispatch' }}
    needs:
      - pre-job
    name: Get Changed Apps
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.apps.outputs.apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0

      - name: Install required packages
        run: npm install yaml

      - name: Extract Metadata
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: apps
        env:
          APPS_TO_BUILD: ${{ github.event_name == 'workflow_dispatch' && inputs.app || join(fromJSON(needs.pre-job.outputs.changed-files), ' ') }}
        with:
          script: |
            const fs = require('fs');
            const yaml = require('yaml');
            const cwd = process.cwd();
            const { APPS_TO_BUILD } = process.env;

            const appsToBuild = APPS_TO_BUILD.split(' ').filter(Boolean);
            const output = [];

            appsToBuild.forEach((app) => {
              const metadataPath = `${cwd}/apps/${app}/metadata.yaml`;

              if (!fs.existsSync(metadataPath)) {
                core.setFailed(`App ${app} does not have a metadata.yaml`);
                process.exit(1);
              }

              const metadataContent = fs.readFileSync(metadataPath, 'utf8');
              const metadata = yaml.parse(metadataContent);
              output.push(metadata);
            });

            core.setOutput('apps', output);
            console.log('apps:', JSON.stringify(output, null, 2));
            core.summary.addHeading('Apps to build:').addList(appsToBuild).write();

  build:
    if: ${{ needs.changed.outputs.apps != '[]' }}
    needs:
      - changed
    name: Build ${{ matrix.app.name }}
    uses: ./.github/workflows/workflow_call-build_image.yaml
    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
      security-events: write
    secrets: inherit
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changed.outputs.apps) }}
      fail-fast: false
    with:
      app: ${{ matrix.app.name }}
      version: ${{ matrix.app.version }}
      release: ${{ github.event_name == 'workflow_dispatch' && inputs.release || github.event_name == 'push' }}
      test: ${{ github.event_name == 'pull_request' || inputs.test == 'true' }}

  build_success:
    if: ${{ !cancelled() }}
    name: Build matrix success
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') }}
        name: Check matrix status
        run: exit 1
