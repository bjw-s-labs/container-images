---
name: "Build Image"

on:
  workflow_call:
    inputs:
      app:
        type: string
        description: The name of the app to build.
        required: true
      image:
        type: string
        description: The name of the image to build.
        required: true
      platforms:
        type: string
        description: The OS arches for which to build the docker image.
        default: linux/amd64
        required: false
      tags:
        type: string
        description: Tags for the image.
        required: true
      labels:
        type: string
        description: Custom labels for the image.
        required: false
      annotations:
        type: string
        description: Custom annotations for the image.
        required: false
      context:
        type: string
        description: The context for the docker build command.
        required: false
        default: "."
      dockerfile:
        type: string
        description: The path to the dockerfile to build.
        required: true
      build-args:
        type: string
        description: Additional build args to pass to the build command.
        default: ""
        required: false
      dry-run:
        type: boolean
        description: Whether or not to push the image.
        default: false
        required: false
      type:
        type: string
        description: The type of application. Valid values are "web" and "cli".
        default: "web"
        required: false
      tests-enabled:
        type: boolean
        description: Whether or not to run goss tests.
        default: false
        required: false

jobs:
  build-test-push:
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.platforms) }}
      fail-fast: false
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    permissions:
      packages: write
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> "${GITHUB_ENV}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Setup Goss
        if: ${{ inputs.tests-enabled == true }}
        uses: mlipscombe/goss-installation-action@a440e50e0ca070a5b84fc4b99a4e2bc7f9390201 # v1.2.2
        with:
          version: v0.4.9

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          images: |-
            ${{ inputs.image }}
          labels: |-
            ${{ inputs.labels }}
          annotations: |-
            ${{ inputs.annotations }}

      - uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6
        name: Build test image
        if: ${{ inputs.tests-enabled == true }}
        id: build-for-test
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          build-args: ${{ inputs.build-args }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/build-cache:${{ inputs.app }}-${{ env.PLATFORM_PAIR }},mode=max
          outputs: |-
            type=docker,name=${{ inputs.image }}:testing

      - name: Run Goss Tests
        id: dgoss
        if: ${{ inputs.tests-enabled == true }}
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ inputs.context }}/ci/goss.yaml
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: |
          image_name="${{ inputs.image }}:testing"
          declare -a goss_args
          if [[ "${{ inputs.type }}" == "cli" ]]; then
            goss_args+=(
              "tail" "-f" "/dev/null"
            )
          fi
          dgoss run "${image_name}" "${goss_args[@]}"

      - uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6
        name: Build image
        id: build
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: ${{ inputs.build-args }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/build-cache:${{ inputs.app }}-${{ env.PLATFORM_PAIR }},mode=max
          cache-to: ${{ !inputs.dry-run && format('type=registry,ref=ghcr.io/{0}/build-cache:{1}-{2}', github.repository_owner, inputs.app, env.PLATFORM_PAIR) || '' }}
          outputs: |-
            type=image,name=${{ inputs.image }},push-by-digest=true,name-canonical=true,push=${{ !inputs.dry-run }}

      - name: Export digest
        if: ${{ !inputs.dry-run }}
        run: |
          mkdir -p ${{ runner.temp }}/digests/${{ inputs.app }}
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${{ inputs.app }}/${digest#sha256:}"

      - name: Upload digest
        if: ${{ !inputs.dry-run }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        with:
          name: digests-${{ inputs.app }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/${{ inputs.app }}/*
          if-no-files-found: error
          retention-days: 1

  merge-manifests:
    needs:
      - build-test-push
    if: ${{ !inputs.dry-run }}
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          images: ${{ inputs.image }}
          tags: ${{ inputs.tags }}
          labels: ${{ inputs.labels }}
          annotations: ${{ inputs.annotations }}

      - name: Download digests
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ inputs.app }}-*
          merge-multiple: true

      - name: Create and push manifest
        working-directory: ${{ runner.temp }}/digests
        run: |-
          TAGS=$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "${DOCKER_METADATA_OUTPUT_JSON}")
          MANIFESTS=$(printf '${{ inputs.image }}@sha256:%s ' *)
          # shellcheck disable=SC2086 # split on purpose
          docker buildx imagetools create ${TAGS} ${MANIFESTS}
